// Code generated by MockGen. DO NOT EDIT.
// Source: ./repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	repository "hw5/internal/pkg/repository"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSellersRepo is a mock of SellersRepo interface.
type MockSellersRepo struct {
	ctrl     *gomock.Controller
	recorder *MockSellersRepoMockRecorder
}

// MockSellersRepoMockRecorder is the mock recorder for MockSellersRepo.
type MockSellersRepoMockRecorder struct {
	mock *MockSellersRepo
}

// NewMockSellersRepo creates a new mock instance.
func NewMockSellersRepo(ctrl *gomock.Controller) *MockSellersRepo {
	mock := &MockSellersRepo{ctrl: ctrl}
	mock.recorder = &MockSellersRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSellersRepo) EXPECT() *MockSellersRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSellersRepo) Create(ctx context.Context, user *repository.Seller) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSellersRepoMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSellersRepo)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockSellersRepo) Delete(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSellersRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSellersRepo)(nil).Delete), ctx, id)
}

// GetById mocks base method.
func (m *MockSellersRepo) GetById(ctx context.Context, id int64) (*repository.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*repository.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockSellersRepoMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockSellersRepo)(nil).GetById), ctx, id)
}

// Read mocks base method.
func (m *MockSellersRepo) Read(ctx context.Context) ([]*repository.Seller, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].([]*repository.Seller)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockSellersRepoMockRecorder) Read(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSellersRepo)(nil).Read), ctx)
}

// Update mocks base method.
func (m *MockSellersRepo) Update(ctx context.Context, user *repository.Seller) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSellersRepoMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSellersRepo)(nil).Update), ctx, user)
}

// MockCarSalesRepo is a mock of CarSalesRepo interface.
type MockCarSalesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCarSalesRepoMockRecorder
}

// MockCarSalesRepoMockRecorder is the mock recorder for MockCarSalesRepo.
type MockCarSalesRepoMockRecorder struct {
	mock *MockCarSalesRepo
}

// NewMockCarSalesRepo creates a new mock instance.
func NewMockCarSalesRepo(ctrl *gomock.Controller) *MockCarSalesRepo {
	mock := &MockCarSalesRepo{ctrl: ctrl}
	mock.recorder = &MockCarSalesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCarSalesRepo) EXPECT() *MockCarSalesRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCarSalesRepo) Create(ctx context.Context, user *repository.CarSale) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCarSalesRepoMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCarSalesRepo)(nil).Create), ctx, user)
}

// Delete mocks base method.
func (m *MockCarSalesRepo) Delete(ctx context.Context, id int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCarSalesRepoMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCarSalesRepo)(nil).Delete), ctx, id)
}

// GetById mocks base method.
func (m *MockCarSalesRepo) GetById(ctx context.Context, id int64) (*repository.CarSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, id)
	ret0, _ := ret[0].(*repository.CarSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockCarSalesRepoMockRecorder) GetById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockCarSalesRepo)(nil).GetById), ctx, id)
}

// Read mocks base method.
func (m *MockCarSalesRepo) Read(ctx context.Context) ([]*repository.CarSale, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx)
	ret0, _ := ret[0].([]*repository.CarSale)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockCarSalesRepoMockRecorder) Read(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockCarSalesRepo)(nil).Read), ctx)
}

// Update mocks base method.
func (m *MockCarSalesRepo) Update(ctx context.Context, user *repository.CarSale) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCarSalesRepoMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCarSalesRepo)(nil).Update), ctx, user)
}
