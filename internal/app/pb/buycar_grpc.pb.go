// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: buycar.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuyCarServiceClient is the client API for BuyCarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuyCarServiceClient interface {
	CreateCarSale(ctx context.Context, in *CreateCarSaleRequest, opts ...grpc.CallOption) (*CreateCarSaleResponse, error)
	UpdateCarSale(ctx context.Context, in *UpdateCarSaleRequest, opts ...grpc.CallOption) (*UpdateCarSaleResponse, error)
	DeleteCarSale(ctx context.Context, in *DeleteCarSaleRequest, opts ...grpc.CallOption) (*DeleteCarSaleResponse, error)
	GetCarSale(ctx context.Context, in *GetCarSaleRequest, opts ...grpc.CallOption) (*GetCarSaleResponse, error)
	CreateSeller(ctx context.Context, in *CreateSellerRequest, opts ...grpc.CallOption) (*CreateSellerResponse, error)
	UpdateSeller(ctx context.Context, in *UpdateSellerRequest, opts ...grpc.CallOption) (*UpdateSellerResponse, error)
	DeleteSeller(ctx context.Context, in *DeleteSellerRequest, opts ...grpc.CallOption) (*DeleteSellerResponse, error)
	GetSeller(ctx context.Context, in *GetSellerRequest, opts ...grpc.CallOption) (*GetSellerResponse, error)
}

type buyCarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuyCarServiceClient(cc grpc.ClientConnInterface) BuyCarServiceClient {
	return &buyCarServiceClient{cc}
}

func (c *buyCarServiceClient) CreateCarSale(ctx context.Context, in *CreateCarSaleRequest, opts ...grpc.CallOption) (*CreateCarSaleResponse, error) {
	out := new(CreateCarSaleResponse)
	err := c.cc.Invoke(ctx, "/todo.BuyCarService/CreateCarSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyCarServiceClient) UpdateCarSale(ctx context.Context, in *UpdateCarSaleRequest, opts ...grpc.CallOption) (*UpdateCarSaleResponse, error) {
	out := new(UpdateCarSaleResponse)
	err := c.cc.Invoke(ctx, "/todo.BuyCarService/UpdateCarSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyCarServiceClient) DeleteCarSale(ctx context.Context, in *DeleteCarSaleRequest, opts ...grpc.CallOption) (*DeleteCarSaleResponse, error) {
	out := new(DeleteCarSaleResponse)
	err := c.cc.Invoke(ctx, "/todo.BuyCarService/DeleteCarSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyCarServiceClient) GetCarSale(ctx context.Context, in *GetCarSaleRequest, opts ...grpc.CallOption) (*GetCarSaleResponse, error) {
	out := new(GetCarSaleResponse)
	err := c.cc.Invoke(ctx, "/todo.BuyCarService/GetCarSale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyCarServiceClient) CreateSeller(ctx context.Context, in *CreateSellerRequest, opts ...grpc.CallOption) (*CreateSellerResponse, error) {
	out := new(CreateSellerResponse)
	err := c.cc.Invoke(ctx, "/todo.BuyCarService/CreateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyCarServiceClient) UpdateSeller(ctx context.Context, in *UpdateSellerRequest, opts ...grpc.CallOption) (*UpdateSellerResponse, error) {
	out := new(UpdateSellerResponse)
	err := c.cc.Invoke(ctx, "/todo.BuyCarService/UpdateSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyCarServiceClient) DeleteSeller(ctx context.Context, in *DeleteSellerRequest, opts ...grpc.CallOption) (*DeleteSellerResponse, error) {
	out := new(DeleteSellerResponse)
	err := c.cc.Invoke(ctx, "/todo.BuyCarService/DeleteSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buyCarServiceClient) GetSeller(ctx context.Context, in *GetSellerRequest, opts ...grpc.CallOption) (*GetSellerResponse, error) {
	out := new(GetSellerResponse)
	err := c.cc.Invoke(ctx, "/todo.BuyCarService/GetSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuyCarServiceServer is the server API for BuyCarService service.
// All implementations must embed UnimplementedBuyCarServiceServer
// for forward compatibility
type BuyCarServiceServer interface {
	CreateCarSale(context.Context, *CreateCarSaleRequest) (*CreateCarSaleResponse, error)
	UpdateCarSale(context.Context, *UpdateCarSaleRequest) (*UpdateCarSaleResponse, error)
	DeleteCarSale(context.Context, *DeleteCarSaleRequest) (*DeleteCarSaleResponse, error)
	GetCarSale(context.Context, *GetCarSaleRequest) (*GetCarSaleResponse, error)
	CreateSeller(context.Context, *CreateSellerRequest) (*CreateSellerResponse, error)
	UpdateSeller(context.Context, *UpdateSellerRequest) (*UpdateSellerResponse, error)
	DeleteSeller(context.Context, *DeleteSellerRequest) (*DeleteSellerResponse, error)
	GetSeller(context.Context, *GetSellerRequest) (*GetSellerResponse, error)
	mustEmbedUnimplementedBuyCarServiceServer()
}

// UnimplementedBuyCarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBuyCarServiceServer struct {
}

func (UnimplementedBuyCarServiceServer) CreateCarSale(context.Context, *CreateCarSaleRequest) (*CreateCarSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCarSale not implemented")
}
func (UnimplementedBuyCarServiceServer) UpdateCarSale(context.Context, *UpdateCarSaleRequest) (*UpdateCarSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCarSale not implemented")
}
func (UnimplementedBuyCarServiceServer) DeleteCarSale(context.Context, *DeleteCarSaleRequest) (*DeleteCarSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCarSale not implemented")
}
func (UnimplementedBuyCarServiceServer) GetCarSale(context.Context, *GetCarSaleRequest) (*GetCarSaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarSale not implemented")
}
func (UnimplementedBuyCarServiceServer) CreateSeller(context.Context, *CreateSellerRequest) (*CreateSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSeller not implemented")
}
func (UnimplementedBuyCarServiceServer) UpdateSeller(context.Context, *UpdateSellerRequest) (*UpdateSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSeller not implemented")
}
func (UnimplementedBuyCarServiceServer) DeleteSeller(context.Context, *DeleteSellerRequest) (*DeleteSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSeller not implemented")
}
func (UnimplementedBuyCarServiceServer) GetSeller(context.Context, *GetSellerRequest) (*GetSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeller not implemented")
}
func (UnimplementedBuyCarServiceServer) mustEmbedUnimplementedBuyCarServiceServer() {}

// UnsafeBuyCarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuyCarServiceServer will
// result in compilation errors.
type UnsafeBuyCarServiceServer interface {
	mustEmbedUnimplementedBuyCarServiceServer()
}

func RegisterBuyCarServiceServer(s grpc.ServiceRegistrar, srv BuyCarServiceServer) {
	s.RegisterService(&BuyCarService_ServiceDesc, srv)
}

func _BuyCarService_CreateCarSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyCarServiceServer).CreateCarSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.BuyCarService/CreateCarSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyCarServiceServer).CreateCarSale(ctx, req.(*CreateCarSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyCarService_UpdateCarSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCarSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyCarServiceServer).UpdateCarSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.BuyCarService/UpdateCarSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyCarServiceServer).UpdateCarSale(ctx, req.(*UpdateCarSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyCarService_DeleteCarSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCarSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyCarServiceServer).DeleteCarSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.BuyCarService/DeleteCarSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyCarServiceServer).DeleteCarSale(ctx, req.(*DeleteCarSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyCarService_GetCarSale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarSaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyCarServiceServer).GetCarSale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.BuyCarService/GetCarSale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyCarServiceServer).GetCarSale(ctx, req.(*GetCarSaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyCarService_CreateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyCarServiceServer).CreateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.BuyCarService/CreateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyCarServiceServer).CreateSeller(ctx, req.(*CreateSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyCarService_UpdateSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyCarServiceServer).UpdateSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.BuyCarService/UpdateSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyCarServiceServer).UpdateSeller(ctx, req.(*UpdateSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyCarService_DeleteSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyCarServiceServer).DeleteSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.BuyCarService/DeleteSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyCarServiceServer).DeleteSeller(ctx, req.(*DeleteSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuyCarService_GetSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuyCarServiceServer).GetSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.BuyCarService/GetSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuyCarServiceServer).GetSeller(ctx, req.(*GetSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BuyCarService_ServiceDesc is the grpc.ServiceDesc for BuyCarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuyCarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.BuyCarService",
	HandlerType: (*BuyCarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCarSale",
			Handler:    _BuyCarService_CreateCarSale_Handler,
		},
		{
			MethodName: "UpdateCarSale",
			Handler:    _BuyCarService_UpdateCarSale_Handler,
		},
		{
			MethodName: "DeleteCarSale",
			Handler:    _BuyCarService_DeleteCarSale_Handler,
		},
		{
			MethodName: "GetCarSale",
			Handler:    _BuyCarService_GetCarSale_Handler,
		},
		{
			MethodName: "CreateSeller",
			Handler:    _BuyCarService_CreateSeller_Handler,
		},
		{
			MethodName: "UpdateSeller",
			Handler:    _BuyCarService_UpdateSeller_Handler,
		},
		{
			MethodName: "DeleteSeller",
			Handler:    _BuyCarService_DeleteSeller_Handler,
		},
		{
			MethodName: "GetSeller",
			Handler:    _BuyCarService_GetSeller_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "buycar.proto",
}
